-- MySQL Script generated by MySQL Workbench
-- Thu Oct  7 17:50:16 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema institut
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema institut
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `institut` DEFAULT CHARACTER SET utf8 ;
USE `institut` ;

-- -----------------------------------------------------
-- Table `institut`.`products`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `institut`.`products` (
  `id` INT NOT NULL,
  `product_name` VARCHAR(255) NULL,
  `product_desc` VARCHAR(255) NULL,
  `product_img` VARCHAR(200) NULL,
  `product_category` VARCHAR(200) NULL,
  PRIMARY KEY (`id`))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `institut`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `institut`.`users` (
  `id` INT NOT NULL,
  `user_name` VARCHAR(200) NULL,
  `user_lastname` VARCHAR(200) NULL,
  `user_role` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `institut`.`works`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `institut`.`works` (
  `id` INT NOT NULL,
  `work_name` VARCHAR(200) NULL,
  `work_price` VARCHAR(45) NULL,
  `work_type` VARCHAR(150) NULL,
  PRIMARY KEY (`id`))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `institut`.`articles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `institut`.`articles` (
  `id` INT NOT NULL,
  `article_content` LONGTEXT NULL,
  `article_author` VARCHAR(45) NULL,
  `article_title` VARCHAR(255) NULL,
  `article_date` VARCHAR(45) NULL,
  `article_slug` VARCHAR(255) NULL,
  PRIMARY KEY (`id`))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `institut`.`medias`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `institut`.`medias` (
  `id` INT NOT NULL,
  `madia_path` VARCHAR(200) NULL,
  `media_ref` VARCHAR(200) NULL,
  `media_ref_id` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `institut`.`messages`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `institut`.`messages` (
  `id` INT NOT NULL,
  `msg_content` LONGTEXT NULL,
  `msg_date` VARCHAR(45) NULL,
  `msg_type` VARCHAR(45) NULL,
  `msg_author_name` VARCHAR(45) NULL,
  `msg_auth_email` VARCHAR(150) NULL,
  `msg_auth_lastname` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = MyISAM
DEFAULT CHARACTER SET = utf8;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
-- -----------------------------------------------------
-- LISTE DES REQUETE COURANTES
-- -----------------------------------------------------
 SELECT *
 FROM nom_table
 WHERE condition
 GROUP BY champ1, champ2
 HAVING groupe condition
 ORDER BY champ
 LIMIT limite, taille;

  SELECT * FROM `wiki1_page` WHERE page_id IS NOT NULL;
 SELECT * FROM `wiki1_page` ORDER BY page_id LIMIT 0, 10;  -- première page
 SELECT * FROM `wiki1_page` ORDER BY page_id LIMIT 10, 10; -- seconde page
 SELECT * FROM `wiki1_page` ORDER BY page_id LIMIT 20, 10; -- troisième page
 
 SELECT hindi.Tag, english.Inenglish, hindi.Inhindi
 FROM english INNER JOIN hindi ON english.Tag = hindi.Tag

INSERT INTO `liste` (`produit`, `prix`, `nombre`) VALUES (:produit, :prix, :nombre);

UPDATE `liste` SET `produit`=:produit, `prix`=:prix, `nombre`=:nombre WHERE `id`=:id;

DELETE FROM `liste` WHERE `id`=:id;

SELECT *
FROM table_1
INNER JOIN table_2 ON table_1.une_colonne = table_2.autre_colonne;
